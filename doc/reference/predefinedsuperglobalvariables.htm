<HTML>
<HEAD>
<TITLE>PHPLint Reference Manual</TITLE>
<META name=description content="PHPLint Reference Manual">
<META name=author      content="icosaedro.it di Umberto Salsi">
<META name=owner       content="icosaedro.it di Umberto Salsi">
<META HTTP-EQUIV="Content-Language"    content="en">
<LINK rel=stylesheet type='text/css' href='../styles.css'>
</HEAD><BODY>

<h2>Predefined superglobal variables</h2>

<p>
The "superglobals" are variables accessible from any scope. They
are predefined by the interpreter and are documented in the PHP manual.
PHPLint assigns to them a type as follows:
</p>

<dl>

<dt><code>/*. mixed[string] .*/ <b>$GLOBALS</b></code></dt>
<dd>
This array is indexed by the names of the global variables and returns
their value. If the variable is not already defined in the global scope,
the program reports an error. For example:
<p>

<pre>
$x = 1;

function f()
{
    echo $GLOBALS['x'];
    echo $GLOBALS['y'];  # error undefined global $y
}
</pre>

<p>
If the expression inside the $GLOBALS[] square braces isn't statically
determinable, i.e. it is an expression to be evaluated at runtime,
PHPLint will not be able to resolve the variable and it will report an error.
</p>
</dd>

<dt><code>/*. string[string] .*/ <b>$_SERVER</b></code></dt>
<dd>
This array is indexed by the environmental variables that are set by
the WEB server.
<p>
</dd>

<dt>
<code>/*. mixed[string] .*/ <b>$_GET</b></code><br>
<code>/*. mixed[string] .*/ <b>$_POST</b></code><br>
<code>/*. mixed[string] .*/ <b>$_REQUEST</b></code><br>
<code>/*. mixed[string] .*/ <b>$_COOKIE</b></code>
</dt>
<dd>
These array are all of the same type: they are indexed by the name
of a parameter received from the browser. Typically their entries are
strings, but some entries can also be arrays of strings when the name of the
parameter received from the client is terminated by these characters:
"<code>[]</code>". Its a good idea to always check for the existence
and the actual type of every parameter. For example, in this code the
parameter "name" is expected to be a string:
<p>

<pre>
if( isset($_POST['name']) &amp;&amp; is_string($_POST['name']) )
    $name = (string) $_POST['name'];
else
    $name = "";
</pre>

<p>
In the following example, the HTML SELECT tag with the "multiple" option
returns an array of the selected options:
</p>

<pre>
if( isset($_POST['hobbies']) &amp;&amp; is_array($_POST['hobbies']) )
    $hobbies = cast("string[int]", $_POST['hobbies']);
else
    $hobbies = /*. (string[int]) .*/ array();
</pre>
</dd>

<dt>
<code>/*. mixed[string][string] .*/ <b>$_FILES</b></code>
</dt>
<dd>
Here too, typically the elements of the array are strings and integer
numbers, but they can be <b>mixed[int]</b> if the request from the browser
contains a parameter terminating with "<code>[]</code>" (upload of two
or more files).
<p>
</dd>

<dt>
<code>/*. string[string] .*/ <b>$_ENV</b></code>
</dt>
<dd>
These are the environment variables of the process executing the PHP program.
<p>
</dd>

<dt>
<code>/*. mixed[string] .*/ <b>$_SESSION</b></code>
</dt>
<dd>
This array is indexed by the names of the variables stored in the current
user session.
<p>
</dd>

<dt>
<code>/*. string .*/ <b>$php_errormsg</b></code>
</dt>
<dd>
A variable containing the text of the last error message generated by
PHP. This variable will only be available within the scope in which
the error occurred, and only if the <tt>track_errors</tt> option of the
<tt>php.ini</tt> configuration file is turned on (it is off by default).
Actually this is not a true super-global, but it is a trick of the
PHP interpreter that creates $php_errormsg as a variable local to the
scope where the error occurred.
<p>
</dd>

</dl>

</body>
</html>
