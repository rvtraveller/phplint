<HTML>
<HEAD>
<TITLE>PHPLint Reference Manual</TITLE>
<META name=description content="PHPLint Reference Manual">
<META name=author      content="icosaedro.it di Umberto Salsi">
<META name=owner       content="icosaedro.it di Umberto Salsi">
<META HTTP-EQUIV="Content-Language"    content="en">
<LINK rel=stylesheet type='text/css' href='../styles.css'>
</HEAD><BODY>

<h2>The syntax of PHPLint</h2>

<p>
The language parsed by PHPLint is a (nearly complete) subset
of the PHP language. Here the syntax is described through
the modified BNF formalism (also known as EBNF) - see <a
href="http://www.icosaedro.it/bnf_chk/index.html">www.icosaedro.it/bnf_chk/index.html</a>
for more details. The elements whose name begin with "x_" belong to the
special PHPLint meta-code and they must always appear inside a multi-line
comment <code>/*. .*/</code>. The package (element no. 1) gives the
structure of the file being parsed.
</p>


1. package =  { <i>text</i><sub>2</sub> | <i>code_block</i><sub>4</sub> | <i>echo_block</i><sub>5</sub> } [ <i>unclosed_code_block</i><sub>3</sub> ] ;<br>
2. text =  <code><b>"one or more characters excluding the special sequence &lt;?"</b></code> ;<br>
3. unclosed_code_block =  ( <code><b>"&lt;?"</b></code> | <code><b>"&lt;?php"</b></code> ) { <i>statement</i><sub>68</sub> | <i>x_function_proto</i><sub>133</sub> | <i>x_class_proto</i><sub>136</sub> } ;<br>
4. code_block =  <i>unclosed_code_block</i><sub>3</sub> <code><b>"?&gt;"</b></code> ;<br>
5. echo_block =  <code><b>"&lt;?="</b></code> <i>expr</i><sub>35</sub> { <code><b>","</b></code> <i>expr</i><sub>35</sub> } [ <code><b>";"</b></code> ] <code><b>"?&gt;"</b></code> ;<br>
6. namespace_separator =  <code><b>"\\"</b></code> ;<br>
7. qualified_name =  [ <i>namespace_separator</i><sub>6</sub> ] <i>id</i><sub>14</sub> { <i>namespace_separator</i><sub>6</sub> <i>id</i><sub>14</sub> } ;<br>
8. constant =  <i>qualified_name</i><sub>7</sub> ;<br>
9. variable =  <code><b>"$"</b></code> <i>id</i><sub>14</sub> ;<br>
10. func_name =  <i>qualified_name</i><sub>7</sub> ;<br>
11. class_name =  <i>qualified_name</i><sub>7</sub> ;<br>
12. class_const =  <i>id</i><sub>14</sub> ;<br>
13. class_var =  <code><b>"$"</b></code> <i>id</i><sub>14</sub> ;<br>
14. id =  ( <i>letter</i><sub>15</sub> | <code><b>"_"</b></code> ) { <i>letter</i><sub>15</sub> | <i>digit</i><sub>149</sub> | <code><b>"_"</b></code> } ;<br>
15. letter =  <code><b>"a".."z"</b></code> | <code><b>"A".."Z"</b></code> | <code><b>"\x7F".."\xFF"</b></code> ;<br>
16. static_expr =  <i>static_expr3</i><sub>17</sub> { <code><b>"or"</b></code> <i>static_expr3</i><sub>17</sub> } ;<br>
17. static_expr3 =  <i>static_expr4</i><sub>18</sub> { <code><b>"xor"</b></code> <i>static_expr4</i><sub>18</sub> } ;<br>
18. static_expr4 =  <i>static_expr6</i><sub>19</sub> { <code><b>"and"</b></code> <i>static_expr6</i><sub>19</sub> } ;<br>
19. static_expr6 =  <i>static_expr7</i><sub>20</sub> { <code><b>"?"</b></code> <i>static_expr</i><sub>16</sub> <code><b>":"</b></code> <i>static_expr</i><sub>16</sub> } ;<br>
20. static_expr7 =  <i>static_expr7_5</i><sub>21</sub> [ <code><b>"??"</b></code> <i>static_expr7</i><sub>20</sub> ] ;<br>
21. static_expr7_5 =  <i>static_expr8</i><sub>22</sub> { <code><b>"||"</b></code> <i>static_expr8</i><sub>22</sub> } ;<br>
22. static_expr8 =  <i>static_expr9</i><sub>23</sub> { <code><b>"&amp;&amp;"</b></code> <i>static_expr9</i><sub>23</sub> } ;<br>
23. static_expr9 =  <i>static_expr10</i><sub>24</sub> { <code><b>"|"</b></code> <i>static_expr10</i><sub>24</sub> } ;<br>
24. static_expr10 =  <i>static_expr11</i><sub>25</sub> { <code><b>"^"</b></code> <i>static_expr11</i><sub>25</sub> } ;<br>
25. static_expr11 =  <i>static_expr12</i><sub>26</sub> { <code><b>"&amp;"</b></code> <i>static_expr12</i><sub>26</sub> } ;<br>
26. static_expr12 =  <i>static_expr13</i><sub>27</sub> [ ( <code><b>"=="</b></code> | <code><b>"!="</b></code> | <code><b>"&lt;&gt;"</b></code> | <code><b>"==="</b></code> | <code><b>"!=="</b></code> | <code><b>"&lt;=&gt;"</b></code> ) <i>static_expr13</i><sub>27</sub> ] ;<br>
27. static_expr13 =  <i>static_expr14</i><sub>28</sub> [ ( <code><b>"&lt;"</b></code> | <code><b>"&lt;="</b></code> | <code><b>"&gt;"</b></code> | <code><b>"&gt;="</b></code> ) <i>static_expr14</i><sub>28</sub> ] ;<br>
28. static_expr14 =  <i>static_expr15</i><sub>29</sub> [ ( <code><b>"&lt;&lt;"</b></code> | <code><b>"&gt;&gt;"</b></code> ) <i>static_expr15</i><sub>29</sub> ] ;<br>
29. static_expr15 =  <i>static_expr16</i><sub>30</sub> [ ( <code><b>"+"</b></code> | <code><b>"-"</b></code> | <code><b>"."</b></code> ) <i>static_expr16</i><sub>30</sub> ] ;<br>
30. static_expr16 =  <i>static_expr17</i><sub>31</sub> [ ( <code><b>"*"</b></code> | <code><b>"/"</b></code> | <code><b>"%"</b></code> ) <i>static_expr17</i><sub>31</sub> ] ;<br>
31. static_expr17 =  ( <code><b>"!"</b></code> | <code><b>"+"</b></code> | <code><b>"-"</b></code> | <code><b>"~"</b></code> | <code><b>"@"</b></code> ) <i>static_expr17</i><sub>31</sub> | <i>static_term</i><sub>32</sub> ;<br>
32. static_term =  <code><b>"NULL"</b></code> | <code><b>"FALSE"</b></code> | <code><b>"TRUE"</b></code> | <i>literal_int</i><sub>144</sub> | <i>literal_float</i><sub>152</sub> | <i>literal_string</i><sub>155</sub> | <i>constant</i><sub>8</sub> | <i>class_name</i><sub>11</sub> <i>dereference_static</i><sub>54</sub> | <code><b>"self"</b></code> <i>dereference_static</i><sub>54</sub> | <code><b>"parent"</b></code> <i>dereference_static</i><sub>54</sub> | <i>static_array</i><sub>33</sub> | <code><b>"("</b></code> <i>php_type</i><sub>65</sub> <code><b>")"</b></code> <i>term</i><sub>52</sub> | <code><b>"("</b></code> <i>static_expr</i><sub>16</sub> <code><b>")"</b></code> ;<br>
33. static_array =  <code><b>"array"</b></code> <code><b>"("</b></code> [ <i>static_array_pair</i><sub>34</sub> { <code><b>","</b></code> <i>static_array_pair</i><sub>34</sub> } [ <code><b>","</b></code> ] ] <code><b>")"</b></code> ;<br>
34. static_array_pair =  <i>static_expr</i><sub>16</sub> [ <code><b>"=&gt;"</b></code> <i>static_expr</i><sub>16</sub> ] ;<br>
35. expr =  <i>expr3</i><sub>36</sub> { <code><b>"or"</b></code> <i>expr3</i><sub>36</sub> } ;<br>
36. expr3 =  <i>expr4</i><sub>37</sub> { <code><b>"xor"</b></code> <i>expr4</i><sub>37</sub> } ;<br>
37. expr4 =  <i>expr6</i><sub>38</sub> { <code><b>"and"</b></code> <i>expr6</i><sub>38</sub> } ;<br>
38. expr6 =  <code><b>"print"</b></code> <i>expr6</i><sub>38</sub> | <i>expr7</i><sub>39</sub> { <code><b>"?"</b></code> <i>expr</i><sub>35</sub> <code><b>":"</b></code> <i>expr</i><sub>35</sub> } ;<br>
39. expr7 =  <i>expr7_5</i><sub>40</sub> [ <code><b>"??"</b></code> <i>expr7</i><sub>39</sub> ] ;<br>
40. expr7_5 =  <i>expr8</i><sub>41</sub> { <code><b>"||"</b></code> <i>expr8</i><sub>41</sub> } ;<br>
41. expr8 =  <i>expr9</i><sub>42</sub> { <code><b>"&amp;&amp;"</b></code> <i>expr9</i><sub>42</sub> } ;<br>
42. expr9 =  <i>expr10</i><sub>43</sub> { <code><b>"|"</b></code> <i>expr10</i><sub>43</sub> } ;<br>
43. expr10 =  <i>expr11</i><sub>44</sub> { <code><b>"^"</b></code> <i>expr11</i><sub>44</sub> } ;<br>
44. expr11 =  <i>expr12</i><sub>45</sub> { <code><b>"&amp;"</b></code> <i>expr12</i><sub>45</sub> } ;<br>
45. expr12 =  <i>expr13</i><sub>46</sub> [ ( <code><b>"=="</b></code> | <code><b>"!="</b></code> | <code><b>"&lt;&gt;"</b></code> | <code><b>"==="</b></code> | <code><b>"!=="</b></code> | <code><b>"&lt;=&gt;"</b></code> ) <i>expr13</i><sub>46</sub> ] ;<br>
46. expr13 =  <i>expr14</i><sub>47</sub> [ ( <code><b>"&lt;"</b></code> | <code><b>"&lt;="</b></code> | <code><b>"&gt;"</b></code> | <code><b>"&gt;="</b></code> ) <i>expr14</i><sub>47</sub> ] ;<br>
47. expr14 =  <i>expr15</i><sub>48</sub> [ ( <code><b>"&lt;&lt;"</b></code> | <code><b>"&gt;&gt;"</b></code> ) <i>expr15</i><sub>48</sub> ] ;<br>
48. expr15 =  <i>expr16</i><sub>49</sub> [ ( <code><b>"+"</b></code> | <code><b>"-"</b></code> | <code><b>"."</b></code> ) <i>expr16</i><sub>49</sub> ] ;<br>
49. expr16 =  <i>expr17</i><sub>50</sub> [ ( <code><b>"*"</b></code> | <code><b>"/"</b></code> | <code><b>"%"</b></code> ) <i>expr17</i><sub>50</sub> ] ;<br>
50. expr17 =  ( <code><b>"!"</b></code> | <code><b>"+"</b></code> | <code><b>"-"</b></code> | <code><b>"~"</b></code> | <code><b>"@"</b></code> ) <i>expr17</i><sub>50</sub> | <i>expr18</i><sub>51</sub> ;<br>
51. expr18 =  ( <code><b>"++"</b></code> | <code><b>"--"</b></code> ) <i>term</i><sub>52</sub> ;<br>
52. term =  <code><b>"NULL"</b></code> | <code><b>"FALSE"</b></code> | <code><b>"TRUE"</b></code> | <i>literal_int</i><sub>144</sub> | <i>literal_float</i><sub>152</sub> | <i>literal_string</i><sub>155</sub> | <code><b>"&amp;"</b></code> <i>term</i><sub>52</sub> | <i>variable</i><sub>9</sub> [ <i>dereference_var</i><sub>53</sub> ] | <i>constant</i><sub>8</sub> | <i>func_call</i><sub>60</sub> [ <i>dereference_object</i><sub>56</sub> ] | <i>class_name</i><sub>11</sub> <i>dereference_static</i><sub>54</sub> | <code><b>"self"</b></code> <i>dereference_static</i><sub>54</sub> | <code><b>"parent"</b></code> <i>dereference_static</i><sub>54</sub> | <i>new</i><sub>62</sub> | <i>clone</i><sub>63</sub> | <i>list</i><sub>58</sub> | <i>isset</i><sub>59</sub> | <i>array</i><sub>66</sub> | <i>x_formal_typecast</i><sub>189</sub> <i>term</i><sub>52</sub> | <code><b>"("</b></code> <i>php_type</i><sub>65</sub> <code><b>")"</b></code> <i>term</i><sub>52</sub> | <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> ;<br>
53. dereference_var =  <i>dereference_array</i><sub>55</sub> | <i>dereference_object</i><sub>56</sub> | <i>assign_op</i><sub>57</sub> <i>expr</i><sub>35</sub> | <code><b>"++"</b></code> | <code><b>"--"</b></code> | <code><b>"instanceof"</b></code> ( <i>class_name</i><sub>11</sub> | <code><b>"parent"</b></code> | <code><b>"self"</b></code> ) ;<br>
54. dereference_static =  <code><b>"::"</b></code> ( <i>class_const</i><sub>12</sub> | <i>class_var</i><sub>13</sub> [ <i>dereference_var</i><sub>53</sub> ] | <i>class_func_call</i><sub>61</sub> [ <i>dereference_object</i><sub>56</sub> ] ) ;<br>
55. dereference_array =  <code><b>"[]"</b></code> <code><b>"="</b></code> <i>expr</i><sub>35</sub> | <code><b>"["</b></code> <i>expr</i><sub>35</sub> <code><b>"]"</b></code> [ <i>dereference_var</i><sub>53</sub> ] ;<br>
56. dereference_object =  <code><b>"-&gt;"</b></code> ( <i>class_var</i><sub>13</sub> [ <i>dereference_var</i><sub>53</sub> ] | <i>class_func_call</i><sub>61</sub> [ <i>dereference_object</i><sub>56</sub> ] ) ;<br>
57. assign_op =  <code><b>"="</b></code> | <code><b>"+="</b></code> | <code><b>"-="</b></code> | <code><b>"*="</b></code> | <code><b>"%="</b></code> | <code><b>"/="</b></code> | <code><b>".="</b></code> | <code><b>"&amp;="</b></code> | <code><b>"|="</b></code> | <code><b>"^="</b></code> | <code><b>"&lt;&lt;="</b></code> | <code><b>"&gt;&gt;="</b></code> ;<br>
58. list =  <code><b>"list"</b></code> <code><b>"("</b></code> [ <i>variable</i><sub>9</sub> [ <i>dereference_var</i><sub>53</sub> ] ] { <code><b>","</b></code> [ <i>variable</i><sub>9</sub> [ <i>dereference_var</i><sub>53</sub> ] ] } <code><b>")"</b></code> <code><b>"="</b></code> <i>expr</i><sub>35</sub> ;<br>
59. isset =  <code><b>"isset"</b></code> <code><b>"("</b></code> <i>variable</i><sub>9</sub> [ <i>dereference_var</i><sub>53</sub> ] { <code><b>","</b></code> [ <i>variable</i><sub>9</sub> <i>dereference_var</i><sub>53</sub> ] } <code><b>")"</b></code> ;<br>
60. func_call =  <i>func_name</i><sub>10</sub> <i>actual_args</i><sub>64</sub> ;<br>
61. class_func_call =  <i>id</i><sub>14</sub> <i>actual_args</i><sub>64</sub> ;<br>
62. new =  <code><b>"new"</b></code> { <i>class_name</i><sub>11</sub> | <code><b>"self"</b></code> | <code><b>"parent"</b></code> } [ <i>x_actual_type_parameters</i><sub>191</sub> ] [ <i>actual_args</i><sub>64</sub> ] | <code><b>"new"</b></code> <code><b>"class"</b></code> [ <i>actual_args</i><sub>64</sub> ] <i>class_body</i><sub>108</sub> ;<br>
63. clone =  <code><b>"clone"</b></code> <i>term</i><sub>52</sub> ;<br>
64. actual_args =  <code><b>"("</b></code> [ <i>expr</i><sub>35</sub> { <code><b>","</b></code> <i>expr</i><sub>35</sub> } ] <code><b>")"</b></code> ;<br>
65. php_type =  <code><b>"boolean"</b></code> | <code><b>"int"</b></code> | <code><b>"integer"</b></code> | <code><b>"float"</b></code> | <code><b>"double"</b></code> | <code><b>"string"</b></code> ;<br>
66. array =  <code><b>"array"</b></code> <code><b>"("</b></code> [ <i>element</i><sub>67</sub> { <code><b>","</b></code> <i>element</i><sub>67</sub> } ] <code><b>")"</b></code> ;<br>
67. element =  [ <i>expr</i><sub>35</sub> <code><b>"=&gt;"</b></code> ] <i>expr</i><sub>35</sub> ;<br>
68. statement =  <i>namespace</i><sub>70</sub> | <i>use</i><sub>71</sub> | <i>define</i><sub>80</sub> | <i>global_const</i><sub>81</sub> | <i>global</i><sub>120</sub> | <i>static</i><sub>121</sub> | <i>echo</i><sub>122</sub> | <i>func_decl</i><sub>101</sub> | <i>class_decl</i><sub>102</sub> | <i>declare</i><sub>73</sub> | <i>if</i><sub>123</sub> | <i>for</i><sub>126</sub> | <i>foreach</i><sub>128</sub> | <i>while</i><sub>129</sub> | <i>do</i><sub>130</sub> | <i>switch</i><sub>84</sub> | <i>continue</i><sub>82</sub> | <i>break</i><sub>83</sub> | <i>exit</i><sub>131</sub> | <i>return</i><sub>132</sub> | <i>x_require_module_statement</i><sub>75</sub> | <i>require</i><sub>76</sub> | <i>require_once</i><sub>77</sub> | <i>include</i><sub>78</sub> | <i>include_once</i><sub>79</sub> | <i>expr</i><sub>35</sub> <code><b>";"</b></code> | <i>try</i><sub>89</sub> | <i>throw</i><sub>92</sub> | <i>text_block</i><sub>69</sub> | <i>empty_statement</i><sub>93</sub> | <i>compound_statement</i><sub>94</sub> ;<br>
69. text_block =  <code><b>"?&gt;"</b></code> { <i>text</i><sub>2</sub> | <i>echo_block</i><sub>5</sub> } <code><b>"&lt;?"</b></code> ;<br>
70. namespace =  <code><b>"namespace"</b></code> <i>qualified_name</i><sub>7</sub> ( <code><b>";"</b></code> | <i>compound_statement</i><sub>94</sub> ) ;<br>
71. use =  <code><b>"use"</b></code> <i>use_alias</i><sub>72</sub> { <code><b>","</b></code> <i>use_alias</i><sub>72</sub> } <code><b>";"</b></code> ;<br>
72. use_alias =  <i>qualified_name</i><sub>7</sub> [ <code><b>"as"</b></code> <i>id</i><sub>14</sub> ] ;<br>
73. declare =  <code><b>"declare"</b></code> <code><b>"("</b></code> <i>directive</i><sub>74</sub> { <code><b>","</b></code> <i>directive</i><sub>74</sub> } <code><b>")"</b></code> <i>statement</i><sub>68</sub> ;<br>
74. directive =  <i>id</i><sub>14</sub> <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ;<br>
75. x_require_module_statement =  <i>x_require_module</i><sub>196</sub> <i>x_single_quoted</i><sub>201</sub> <i>x_semicolon</i><sub>163</sub> ;<br>
76. require =  <code><b>"require"</b></code> <i>expr</i><sub>35</sub> <code><b>";"</b></code> ;<br>
77. require_once =  <code><b>"require_once"</b></code> <i>expr</i><sub>35</sub> <code><b>";"</b></code> ;<br>
78. include =  <code><b>"include"</b></code> <i>expr</i><sub>35</sub> <code><b>";"</b></code> ;<br>
79. include_once =  <code><b>"include_once"</b></code> <i>expr</i><sub>35</sub> <code><b>";"</b></code> ;<br>
80. define =  [ <i>x_private</i><sub>103</sub> ] <code><b>"define"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>","</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> ;<br>
81. global_const =  [ <i>x_private</i><sub>103</sub> ] <code><b>"const"</b></code> <i>id</i><sub>14</sub> <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> { <code><b>","</b></code> <i>constant</i><sub>8</sub> <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> } <code><b>";"</b></code> ;<br>
82. continue =  <code><b>"continue"</b></code> [ <i>expr</i><sub>35</sub> ] <code><b>";"</b></code> ;<br>
83. break =  <code><b>"break"</b></code> [ <i>expr</i><sub>35</sub> ] <code><b>";"</b></code> ;<br>
84. switch =  <code><b>"switch"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> <code><b>"{"</b></code> { <i>case</i><sub>85</sub> | <i>default</i><sub>86</sub> | <i>x_missing_default</i><sub>88</sub> } <code><b>"}"</b></code> ;<br>
85. case =  <code><b>"case"</b></code> <i>static_expr</i><sub>16</sub> <code><b>":"</b></code> { <i>statement</i><sub>68</sub> } [ <i>x_missing_break</i><sub>87</sub> ] ;<br>
86. default =  <code><b>"default"</b></code> <code><b>":"</b></code> { <i>statement</i><sub>68</sub> } [ <i>x_missing_break</i><sub>87</sub> ] ;<br>
87. x_missing_break =  <i>x_missing_break</i><sub>87</sub> <i>x_semicolon</i><sub>163</sub> ;<br>
88. x_missing_default =  <i>x_missing_default</i><sub>88</sub> <i>x_colon</i><sub>176</sub> ;<br>
89. try =  <code><b>"try"</b></code> <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> <i>catch</i><sub>90</sub> { <i>catch</i><sub>90</sub> } [ <i>finally</i><sub>91</sub> ] ;<br>
90. catch =  <code><b>"catch"</b></code> <code><b>"("</b></code> { <i>class_name</i><sub>11</sub> } <i>variable</i><sub>9</sub> <code><b>")"</b></code> <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> ;<br>
91. finally =  <code><b>"finally"</b></code> <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> ;<br>
92. throw =  <code><b>"throw"</b></code> <i>expr</i><sub>35</sub> <code><b>";"</b></code> ;<br>
93. empty_statement =  <code><b>";"</b></code> ;<br>
94. compound_statement =  <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> ;<br>
95. function =  <i>signature</i><sub>96</sub> <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> ;<br>
96. signature =  [ <i>x_type</i><sub>194</sub> ] <code><b>"function"</b></code> [ <code><b>"&amp;"</b></code> ] <i>id</i><sub>14</sub> <code><b>"("</b></code> [ <i>formal_args</i><sub>97</sub> ] <code><b>")"</b></code> [ <code><b>":"</b></code> <i>type_hint</i><sub>100</sub> ] <i>x_triggered_errors</i><sub>141</sub> <i>x_thrown_exceptions</i><sub>143</sub> ;<br>
97. formal_args =  <i>variadic</i><sub>99</sub> | <i>x_args</i><sub>182</sub> | <i>arg</i><sub>98</sub> { <code><b>","</b></code> <i>arg</i><sub>98</sub> } [ <code><b>","</b></code> <i>variadic</i><sub>99</sub> | <i>x_comma</i><sub>183</sub> <i>x_args</i><sub>182</sub> ] ;<br>
98. arg =  [ <i>x_return</i><sub>178</sub> ] [ <i>x_type</i><sub>194</sub> | <i>type_hint</i><sub>100</sub> ] [ <code><b>"&amp;"</b></code> ] <i>variable</i><sub>9</sub> [ <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ] ;<br>
99. variadic =  [ <i>x_type</i><sub>194</sub> | <i>type_hint</i><sub>100</sub> ] <code><b>"..."</b></code> <i>variable</i><sub>9</sub> ;<br>
100. type_hint =  <code><b>"bool"</b></code> | <code><b>"int"</b></code> | <code><b>"float"</b></code> | <code><b>"string"</b></code> | <code><b>"array"</b></code> [ <i>x_index</i><sub>195</sub> { <i>x_index</i><sub>195</sub> } [ <i>x_type_name</i><sub>190</sub> ] ] | <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] | <code><b>"self"</b></code> [ <i>x_actual_type_parameters</i><sub>191</sub> ] | <code><b>"parent"</b></code> [ <i>x_actual_type_parameters</i><sub>191</sub> ] ;<br>
101. func_decl =  [ <i>x_private</i><sub>103</sub> ] <i>function</i><sub>95</sub> ;<br>
102. class_decl =  <i>class</i><sub>106</sub> ;<br>
103. x_private =  <code><b>"private"</b></code> ;<br>
104. x_visibility =  <code><b>"public"</b></code> | <code><b>"protected"</b></code> | <code><b>"private"</b></code> ;<br>
105. x_unchecked =  <code><b>"unchecked"</b></code> ;<br>
106. class =  <i>class_regular</i><sub>107</sub> | <i>class_interface</i><sub>109</sub> ;<br>
107. class_regular =  [ <i>x_private</i><sub>103</sub> ] [ <i>x_unchecked</i><sub>105</sub> ] [ <code><b>"final"</b></code> ] [ <code><b>"abstract"</b></code> ] <code><b>"class"</b></code> <i>id</i><sub>14</sub> [ <i>x_formal_type_parameters</i><sub>112</sub> ] <i>class_body</i><sub>108</sub> ;<br>
108. class_body =  [ <i>extends</i><sub>110</sub> ] [ <i>implements</i><sub>111</sub> ] <code><b>"{"</b></code> { <i>const</i><sub>116</sub> | <i>property</i><sub>117</sub> | <i>method</i><sub>118</sub> | <i>x_method_proto</i><sub>134</sub> | <i>abstract_method</i><sub>119</sub> } <code><b>"}"</b></code> ;<br>
109. class_interface =  [ <i>x_private</i><sub>103</sub> ] <code><b>"interface"</b></code> <i>id</i><sub>14</sub> [ <i>x_formal_type_parameters</i><sub>112</sub> ] [ <code><b>"extends"</b></code> <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] { <code><b>","</b></code> <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] } ] <code><b>"{"</b></code> { <i>public_const</i><sub>115</sub> | [ <code><b>"static"</b></code> ] <i>signature</i><sub>96</sub> [ <i>x_thrown_exceptions</i><sub>143</sub> ] <code><b>";"</b></code> } <code><b>"}"</b></code> ;<br>
110. extends =  <code><b>"extends"</b></code> <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] ;<br>
111. implements =  <code><b>"implements"</b></code> <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] { <code><b>","</b></code> <i>class_name</i><sub>11</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] } ;<br>
112. x_formal_type_parameters =  <code><b>"&lt;"</b></code> <i>x_formal_type_parameter</i><sub>113</sub> { <code><b>","</b></code> <i>x_formal_type_parameter</i><sub>113</sub> } <code><b>"&gt;"</b></code> ;<br>
113. x_formal_type_parameter =  <i>id</i><sub>14</sub> [ <i>x_extends</i><sub>165</sub> <i>x_type</i><sub>194</sub> { <code><b>"&amp;"</b></code> <i>x_type</i><sub>194</sub> } ] ;<br>
114. visibility =  <code><b>"public"</b></code> | <code><b>"protected"</b></code> | <code><b>"private"</b></code> ;<br>
115. public_const =  <code><b>"const"</b></code> <i>id</i><sub>14</sub> <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> { <code><b>","</b></code> <i>constant</i><sub>8</sub> <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> } <code><b>";"</b></code> ;<br>
116. const =  [ <i>x_visibility</i><sub>104</sub> ] <i>public_const</i><sub>115</sub> ;<br>
117. property =  [ <i>visibility</i><sub>114</sub> ] [ <code><b>"static"</b></code> ] [ <i>x_type</i><sub>194</sub> ] <i>variable</i><sub>9</sub> [ <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ] { <code><b>","</b></code> <i>variable</i><sub>9</sub> [ <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ] } <code><b>";"</b></code> ;<br>
118. method =  { <i>visibility</i><sub>114</sub> | <code><b>"static"</b></code> | <code><b>"final"</b></code> } <i>signature</i><sub>96</sub> <code><b>"{"</b></code> { <i>statement</i><sub>68</sub> } <code><b>"}"</b></code> ;<br>
119. abstract_method =  <code><b>"abstract"</b></code> { <i>visibility</i><sub>114</sub> | <code><b>"static"</b></code> } <i>signature</i><sub>96</sub> <code><b>";"</b></code> ;<br>
120. global =  <code><b>"global"</b></code> <i>variable</i><sub>9</sub> { <code><b>","</b></code> <i>variable</i><sub>9</sub> } <code><b>";"</b></code> ;<br>
121. static =  <code><b>"static"</b></code> [ <i>x_type</i><sub>194</sub> ] <i>variable</i><sub>9</sub> [ <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ] { <code><b>","</b></code> <i>variable</i><sub>9</sub> [ <code><b>"="</b></code> <i>static_expr</i><sub>16</sub> ] } <code><b>";"</b></code> ;<br>
122. echo =  <code><b>"echo"</b></code> <i>expr</i><sub>35</sub> { <code><b>","</b></code> <i>expr</i><sub>35</sub> } <code><b>";"</b></code> ;<br>
123. if =  <code><b>"if"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> <i>statement</i><sub>68</sub> { <i>elseif</i><sub>124</sub> } [ <i>else</i><sub>125</sub> ] ;<br>
124. elseif =  <code><b>"elseif"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> <i>statement</i><sub>68</sub> ;<br>
125. else =  <code><b>"else"</b></code> <i>statement</i><sub>68</sub> ;<br>
126. for =  <code><b>"for"</b></code> <code><b>"("</b></code> [ <i>expr_list</i><sub>127</sub> ] <code><b>";"</b></code> [ <i>expr_list</i><sub>127</sub> ] <code><b>";"</b></code> [ <i>expr_list</i><sub>127</sub> ] <code><b>")"</b></code> <i>statement</i><sub>68</sub> ;<br>
127. expr_list =  <i>expr</i><sub>35</sub> { <code><b>","</b></code> <i>expr</i><sub>35</sub> } ;<br>
128. foreach =  <code><b>"foreach"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>"as"</b></code> [ <i>variable</i><sub>9</sub> <code><b>"=&gt;"</b></code> ] [ <code><b>"&amp;"</b></code> ] <i>variable</i><sub>9</sub> <code><b>")"</b></code> <i>statement</i><sub>68</sub> ;<br>
129. while =  <code><b>"while"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> <i>statement</i><sub>68</sub> ;<br>
130. do =  <code><b>"do"</b></code> <i>statement</i><sub>68</sub> <code><b>"while"</b></code> <code><b>"("</b></code> <i>expr</i><sub>35</sub> <code><b>")"</b></code> <code><b>";"</b></code> ;<br>
131. exit =  ( <code><b>"exit"</b></code> | <code><b>"die"</b></code> ) [ <code><b>"("</b></code> [ <i>expr</i><sub>35</sub> ] <code><b>")"</b></code> ] <code><b>";"</b></code> ;<br>
132. return =  <code><b>"return"</b></code> [ <i>expr</i><sub>35</sub> ] <code><b>";"</b></code> ;<br>
133. x_function_proto =  <i>x_forward</i><sub>162</sub> [ <i>x_private</i><sub>103</sub> ] <i>x_signature</i><sub>137</sub> <i>x_semicolon</i><sub>163</sub> ;<br>
134. x_method_proto =  <i>x_forward</i><sub>162</sub> <i>x_method</i><sub>135</sub> ;<br>
135. x_method =  { <i>x_visibility</i><sub>104</sub> | <i>x_abstract</i><sub>167</sub> | <i>x_final</i><sub>168</sub> | <i>x_static</i><sub>169</sub> } <i>x_signature</i><sub>137</sub> <i>x_semicolon</i><sub>163</sub> ;<br>
136. x_class_proto =  <i>x_forward</i><sub>162</sub> { <i>x_private</i><sub>103</sub> | <i>x_abstract</i><sub>167</sub> | <i>x_unchecked</i><sub>105</sub> } <i>x_class</i><sub>164</sub> <i>x_id</i><sub>186</sub> [ <i>x_extends</i><sub>165</sub> <i>x_qualified_name</i><sub>188</sub> ] [ <i>x_implements</i><sub>166</sub> <i>x_qualified_name</i><sub>188</sub> { <i>x_comma</i><sub>183</sub> <i>x_qualified_name</i><sub>188</sub> } ] <i>x_lbrace</i><sub>174</sub> { <i>x_method</i><sub>135</sub> } <i>x_rbrace</i><sub>175</sub> ;<br>
137. x_signature =  <i>x_type</i><sub>194</sub> <i>x_function</i><sub>177</sub> [ <i>x_by_ref</i><sub>179</sub> ] <i>x_id</i><sub>186</sub> <i>x_lround</i><sub>170</sub> [ <i>x_formal_args</i><sub>138</sub> ] <i>x_rround</i><sub>171</sub> [ <i>x_triggered_errors</i><sub>141</sub> ] [ <i>x_thrown_exceptions</i><sub>143</sub> ] ;<br>
138. x_formal_args =  <i>x_variadic</i><sub>140</sub> | <i>x_args</i><sub>182</sub> | <i>x_arg</i><sub>139</sub> { <i>x_comma</i><sub>183</sub> <i>x_arg</i><sub>139</sub> } [ <i>x_comma</i><sub>183</sub> <i>x_variadic</i><sub>140</sub> | <i>x_comma</i><sub>183</sub> <i>x_args</i><sub>182</sub> ] ;<br>
139. x_arg =  [ <i>x_return</i><sub>178</sub> ] <i>x_type</i><sub>194</sub> [ <i>x_by_ref</i><sub>179</sub> ] <i>x_variable</i><sub>200</sub> [ <i>x_eq</i><sub>181</sub> ] ;<br>
140. x_variadic =  <i>x_type</i><sub>194</sub> <code><b>"..."</b></code> <i>x_variable</i><sub>200</sub> ;<br>
141. x_triggered_errors =  <code><b>"triggers"</b></code> <i>x_error</i><sub>142</sub> { <i>x_comma</i><sub>183</sub> <i>x_error</i><sub>142</sub> } ;<br>
142. x_error =  <code><b>"E_ERROR"</b></code> | <code><b>"E_WARNING"</b></code> | <code><b>"E_PARSE"</b></code> | <code><b>"E_NOTICE"</b></code> | <code><b>"E_CORE_ERROR"</b></code> | <code><b>"E_CORE_WARNING"</b></code> | <code><b>"E_COMPILE_ERROR"</b></code> | <code><b>"E_COMPILE_WARNING"</b></code> | <code><b>"E_USER_ERROR"</b></code> | <code><b>"E_USER_WARNING"</b></code> | <code><b>"E_USER_NOTICE"</b></code> | <code><b>"E_STRICT"</b></code> | <code><b>"E_RECOVERABLE_ERROR"</b></code> | <code><b>"E_DEPRECATED"</b></code> | <code><b>"E_USER_DEPRECATED"</b></code> | <code><b>"E_ALL"</b></code> ;<br>
143. x_thrown_exceptions =  <i>x_throws</i><sub>180</sub> <i>x_qualified_name</i><sub>188</sub> { <i>x_comma</i><sub>183</sub> <i>x_qualified_name</i><sub>188</sub> } ;<br>
144. literal_int =  <i>literal_int_8</i><sub>145</sub> | <i>literal_int_10</i><sub>146</sub> | <i>literal_int_16</i><sub>147</sub> ;<br>
145. literal_int_8 =  <code><b>"0"</b></code> <i>digit8</i><sub>148</sub> { <i>digit8</i><sub>148</sub> } ;<br>
146. literal_int_10 =  <code><b>"1".."9"</b></code> { <i>digit</i><sub>149</sub> } ;<br>
147. literal_int_16 =  <code><b>"0x"</b></code> <i>digit16</i><sub>150</sub> { <i>digit16</i><sub>150</sub> } ;<br>
148. digit8 =  <code><b>"0".."7"</b></code> ;<br>
149. digit =  <code><b>"0".."9"</b></code> ;<br>
150. digit16 =  <i>digit</i><sub>149</sub> | <code><b>"a".."f"</b></code> | <code><b>"A".."F"</b></code> ;<br>
151. digits =  <i>digit</i><sub>149</sub> { <i>digit</i><sub>149</sub> } ;<br>
152. literal_float =  <i>digits</i><sub>151</sub> ( <i>decimals</i><sub>153</sub> | <i>scale</i><sub>154</sub> | <i>decimals</i><sub>153</sub> <i>scale</i><sub>154</sub> ) | <code><b>"INF"</b></code> | <code><b>"NAN"</b></code> ;<br>
153. decimals =  <code><b>"."</b></code> <i>digits</i><sub>151</sub> ;<br>
154. scale =  ( <code><b>"e"</b></code> | <code><b>"E"</b></code> ) [ <code><b>"+"</b></code> | <code><b>"-"</b></code> ] <i>digits</i><sub>151</sub> ;<br>
155. literal_string =  <i>single_quoted</i><sub>156</sub> | <i>double_quoted</i><sub>157</sub> | <i>here_doc</i><sub>161</sub> ;<br>
156. single_quoted =  <code><b>"'"</b></code> { <code><b>"\\\\"</b></code> | <code><b>"\\'"</b></code> | <code><b>"any char except '\\"</b></code> } <code><b>"'"</b></code> ;<br>
157. double_quoted =  <code><b>"\""</b></code> { <i>escaped_char</i><sub>158</sub> | <i>escaped_octal</i><sub>159</sub> | <i>escaped_hex</i><sub>160</sub> | <i>variable</i><sub>9</sub> | <code><b>"any char except \" \\ $"</b></code> } <code><b>"\""</b></code> ;<br>
158. escaped_char =  <code><b>"\\"</b></code> ( <code><b>"n"</b></code> | <code><b>"r"</b></code> | <code><b>"t"</b></code> | <code><b>"\\"</b></code> | <code><b>"$"</b></code> | <code><b>"{"</b></code> | <code><b>"\""</b></code> ) ;<br>
159. escaped_octal =  <code><b>"\\"</b></code> <i>digit8</i><sub>148</sub> [ <i>digit8</i><sub>148</sub> [ <i>digit8</i><sub>148</sub> ] ] ;<br>
160. escaped_hex =  <code><b>"\\"</b></code> ( <code><b>"x"</b></code> | <code><b>"X"</b></code> ) <i>digit16</i><sub>150</sub> [ <i>digit16</i><sub>150</sub> ] ;<br>
161. here_doc =  <code><b>"TO DO"</b></code> ;<br>
162. x_forward =  <code><b>"forward"</b></code> ;<br>
163. x_semicolon =  <code><b>";"</b></code> ;<br>
164. x_class =  <code><b>"class"</b></code> ;<br>
165. x_extends =  <code><b>"extends"</b></code> ;<br>
166. x_implements =  <code><b>"implements"</b></code> ;<br>
167. x_abstract =  <code><b>"abstract"</b></code> ;<br>
168. x_final =  <code><b>"x_final"</b></code> ;<br>
169. x_static =  <code><b>"x_static"</b></code> ;<br>
170. x_lround =  <code><b>"("</b></code> ;<br>
171. x_rround =  <code><b>")"</b></code> ;<br>
172. x_lsquare =  <code><b>"["</b></code> ;<br>
173. x_rsquare =  <code><b>"]"</b></code> ;<br>
174. x_lbrace =  <code><b>"{"</b></code> ;<br>
175. x_rbrace =  <code><b>"}"</b></code> ;<br>
176. x_colon =  <code><b>":"</b></code> ;<br>
177. x_function =  <code><b>"function"</b></code> ;<br>
178. x_return =  <code><b>"return"</b></code> ;<br>
179. x_by_ref =  <code><b>"&amp;"</b></code> ;<br>
180. x_throws =  <code><b>"throws"</b></code> ;<br>
181. x_eq =  <code><b>"="</b></code> ;<br>
182. x_args =  <code><b>"args"</b></code> ;<br>
183. x_comma =  <code><b>","</b></code> ;<br>
184. x_self =  <code><b>"self"</b></code> ;<br>
185. x_parent =  <code><b>"parent"</b></code> ;<br>
186. x_id =  <i>id</i><sub>14</sub> ;<br>
187. x_namespace_separator =  <code><b>"\\"</b></code> ;<br>
188. x_qualified_name =  [ <i>x_namespace_separator</i><sub>187</sub> ] <i>x_id</i><sub>186</sub> { <i>x_namespace_separator</i><sub>187</sub> <i>x_id</i><sub>186</sub> } ;<br>
189. x_formal_typecast =  <i>x_lround</i><sub>170</sub> <i>x_type</i><sub>194</sub> <i>x_rround</i><sub>171</sub> ;<br>
190. x_type_name =  <code><b>"void"</b></code> | <code><b>"boolean"</b></code> | <code><b>"int"</b></code> | <code><b>"integer"</b></code> | <code><b>"float"</b></code> | <code><b>"double"</b></code> | <code><b>"string"</b></code> | <code><b>"resource"</b></code> | <code><b>"mixed"</b></code> | <code><b>"object"</b></code> | <i>x_qualified_name</i><sub>188</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] | <i>x_self</i><sub>184</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] | <i>x_parent</i><sub>185</sub> [ <i>x_actual_type_parameters</i><sub>191</sub> ] ;<br>
191. x_actual_type_parameters =  <code><b>"&lt;"</b></code> <i>x_actual_type_parameter</i><sub>192</sub> { <code><b>","</b></code> <i>x_actual_type_parameter</i><sub>192</sub> } <code><b>"&gt;"</b></code> ;<br>
192. x_actual_type_parameter =  <i>x_type_name</i><sub>190</sub> | <i>x_class_wildcard</i><sub>193</sub> ;<br>
193. x_class_wildcard =  <code><b>"?"</b></code> [ <code><b>"extends"</b></code> <i>x_type_name</i><sub>190</sub> | <code><b>"super"</b></code> <i>x_type_name</i><sub>190</sub> ] ;<br>
194. x_type =  <i>x_type_name</i><sub>190</sub> { <i>x_index</i><sub>195</sub> } | <i>x_array</i><sub>199</sub> [ <i>x_index</i><sub>195</sub> { <i>x_index</i><sub>195</sub> } <i>x_type_name</i><sub>190</sub> ] ;<br>
195. x_index =  <i>x_lsquare</i><sub>172</sub> [ <i>x_int</i><sub>197</sub> | <i>x_string</i><sub>198</sub> ] <i>x_rsquare</i><sub>173</sub> ;<br>
196. x_require_module =  <code><b>"require_module"</b></code> ;<br>
197. x_int =  <code><b>"int"</b></code> ;<br>
198. x_string =  <code><b>"string"</b></code> ;<br>
199. x_array =  <code><b>"array"</b></code> ;<br>
200. x_variable =  <code><b>"$"</b></code> <i>id</i><sub>14</sub> ;<br>
201. x_single_quoted =  <code><b>"'"</b></code> { <code><b>"\\\\"</b></code> | <code><b>"\\'"</b></code> | <code><b>"any char except '\\"</b></code> } <code><b>"'"</b></code> ;<br>


</body>
</html>
