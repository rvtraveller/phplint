BEGIN parsing of 5-static-expr-evaluation.php
1:	<?php
2:	
3:	// Since PHP 5.6.0, simple evaluation is allowed in static expressions:
4:	// const, default value of formal parameter, case switch, class const.
5:	// See http://php.net/manual/en/language.oop5.constants.php
6:	
7:	/*. require_module 'core'; .*/
8:	error_reporting(-1);
9:	
10:	// Example #3 from the manual:
11:	const ONE = 1;
12:	
13:	class foo {
14:	    // As of PHP 5.6.0
15:	    const TWO = ONE * 2;
16:	    const THREE = ONE + self::TWO;
17:	    const SENTENCE = 'The value of THREE is '.self::THREE;
18:	}
19:	
20:	
21:	# Checking parsed values. Trick: if the bool expr is statically evaluated as TRUE
22:	# as it should, then the following variable is definitely assigned and the echo
23:	# command does not complain.
24:	if( foo::TWO === 2 )
25:		$test1 = 1;
26:	echo $test1;
27:	
28:	if( foo::THREE === 3 )
29:		$test2 = 2;
30:	echo $test2;
31:	
32:	if( foo::SENTENCE === 'The value of THREE is 3' )
33:		$test3 = 3;
34:	echo $test3;
35:	
36:	
37:	# Check some more operator:
38:	
39:	const C1 = (TRUE and TRUE or FALSE xor TRUE) || FALSE && TRUE; // TRUE
40:	if( C1 )
41:		$test4 = 4;
42:	echo $test4;
43:	
44:	const C2 = (1 & 3) + (4 | 8) + (1 << 4) + (1024 >> 10); // 30
45:	if( C2 === 30 )
46:		$test5 = 5;
47:	echo $test5;
48:	
49:	const C3 = 6/2 - 3; // 3.0
50:	// FIXME: actually PHP evaluates int(3) here, so the following comparisong is
51:	// true for PHPLint, but false for PHP:
52:	//if( C3 === 0.0 ) ...
53:	// To run this source without error, need to use weak comparison:
54:	if( C3 == 0.0 )

	if( C3 == 0.0 )
	             \_ HERE
==== 54: notice: comparison by equality/inequality between float numbers. Remember that float numbers have limited precision, and that expressions algebrically equivalent might give different results. For example, 0.57-0.56==0.1 would give FALSE.
55:		$test6 = 6;
56:	echo $test6;
57:	
58:	# Check static expr in several contexts:
59:	
60:	switch(1){
61:		case 1&3: break;
62:		default:
63:	}
64:	
65:	function f($x = 1 <= 2){ echo $x; }

	function f($x = 1 <= 2){ echo $x; }
	                                 \_ HERE
==== 65: notice: implicit conversion to string of a boolean value: remember that FALSE gets rendered as empty string "" while TRUE gets rendered as "1"
66:	f();
67:	
END parsing of 5-static-expr-evaluation.php
==== ?:?: notice: required module core.php
Overall test results: 0 errors, 0 warnings.
