BEGIN parsing of 5-namespace-example-9.php
1:	<?php
2:	/*. require_module 'spl'; .*/
3:	namespace A\B\C;
4:	class Exception extends \Exception {}
5:	
6:	if( new Exception('hi') ); // \A\B\C\Exception

	if( new Exception('hi') ); // \A\B\C\Exception
	                         \_ HERE
==== 6: ERROR: found expression of type A\B\C\Exception, expected type is boolean. Remember that an object evaluates to FALSE if it has no properties, and evaluates to TRUE if it has at least one property.
7:	if( new \Exception('hi') ); // \Exception

	if( new \Exception('hi') ); // \Exception
	                          \_ HERE
==== 7: ERROR: found expression of type Exception, expected type is boolean. Remember that an object evaluates to FALSE if it has no properties, and evaluates to TRUE if it has at least one property.
8:	
9:	if( new ArrayObject() ); // class A\B\C\ArrayObject not found

	if( new ArrayObject() ); // class A\B\C\ArrayObject not found
	                   \_ HERE
==== 9: ERROR: unknown type `ArrayObject'
10:	if( new \ArrayObject() ); // class A\B\C\ArrayObject not found

	if( new \ArrayObject() ); // class A\B\C\ArrayObject not found
	                        \_ HERE
==== 10: ERROR: found expression of type ArrayObject, expected type is boolean. Remember that an object evaluates to FALSE if it has no properties, and evaluates to TRUE if it has at least one property.
11:	
12:	
13:	const E_ERROR = 45;
14:	
15:	/*. int .*/ function strlen(/*. int .*/ $i)
16:	{
17:	    return \strlen("" . $i) - 1;
18:	}
19:	
20:	echo E_ERROR, "\n"; // prints "45"
21:	echo E_NOTICE, "\n"; // prints "8" - falls back to global E_NOTICE
22:	
23:	echo strlen(123), "\n"; // prints "2"
24:	if (is_array('hi')) { // prints "is not array"
25:	    echo "is array\n";
26:	} else {
27:	    echo "is not array\n";
28:	}
29:	
30:	?>
END parsing of 5-namespace-example-9.php
==== ?:?: notice: required module core.php
==== ?:?: notice: required module file.php
==== ?:?: notice: required module spl.php
Overall test results: 4 errors, 0 warnings.
